<?php
require_once 'config.php';

echo "<h2>üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auto-Update Order Status</h2>";

try {
    $conn = getConnection();
    
    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Trigger
    echo "<h3>üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Function...</h3>";
    
    $createFunctionQuery = "
    CREATE OR REPLACE FUNCTION update_order_status()
    RETURNS TRIGGER AS $$
    BEGIN
        -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ order_id ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡∏°‡∏µ payment ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        IF EXISTS (
            SELECT 1
            FROM payments
            WHERE order_id = NEW.order_id
              AND payment_status = 'paid'
        ) THEN
            -- ‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 payment ‡πÄ‡∏õ‡πá‡∏ô paid ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï order ‡πÄ‡∏õ‡πá‡∏ô paid
            UPDATE orders
            SET order_status = 'paid',
                updated_at = NOW()
            WHERE id = NEW.order_id;
            
            -- Log ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á activity_logs)
            BEGIN
                INSERT INTO activity_logs (user_id, action, description, table_name, record_id)
                VALUES (
                    NEW.user_id,
                    'payment_completed',
                    'Payment completed via smart trigger for order ' || NEW.order_id,
                    'payments',
                    NEW.id
                );
            EXCEPTION
                WHEN OTHERS THEN
                    -- ‡πÑ‡∏°‡πà critical ‡∏ñ‡πâ‡∏≤ log ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    NULL;
            END;
        ELSE
            -- ‡πÑ‡∏°‡πà‡∏°‡∏µ payment ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô paid ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ pending
            UPDATE orders
            SET order_status = 'pending',
                updated_at = NOW()
            WHERE id = NEW.order_id;
        END IF;

        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    ";
    
    $functionResult = pg_query($conn, $createFunctionQuery);
    if (!$functionResult) {
        throw new Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Function ‡πÑ‡∏î‡πâ: " . pg_last_error($conn));
    }
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Function ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡∏ö‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á payments
    echo "<h3>üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger...</h3>";
    
    // ‡∏•‡∏ö Trigger ‡πÅ‡∏•‡∏∞ Function ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    $dropTriggerQuery = "DROP TRIGGER IF EXISTS trg_update_order_status ON payments";
    $dropResult = pg_query($conn, $dropTriggerQuery);
    if ($dropResult) {
        echo "‚úÖ ‡∏•‡∏ö Trigger ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    }
    
    $dropFunctionQuery = "DROP FUNCTION IF EXISTS update_order_status()";
    $dropFunctionResult = pg_query($conn, $dropFunctionQuery);
    if ($dropFunctionResult) {
        echo "‚úÖ ‡∏•‡∏ö Function ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡πÉ‡∏´‡∏°‡πà
    $createTriggerQuery = "
    CREATE TRIGGER trg_update_order_status
    AFTER INSERT OR UPDATE ON payments
    FOR EACH ROW
    EXECUTE FUNCTION update_order_status();
    ";
    
    $triggerResult = pg_query($conn, $createTriggerQuery);
    if (!$triggerResult) {
        throw new Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡πÑ‡∏î‡πâ: " . pg_last_error($conn));
    }
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DELETE (‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡∏ö payment)
    echo "<h3>üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Delete Trigger...</h3>";
    
    $createDeleteTriggerQuery = "
    CREATE TRIGGER trg_update_order_status_delete
    AFTER DELETE ON payments
    FOR EACH ROW
    EXECUTE FUNCTION update_order_status();
    ";
    
    $deleteTriggerResult = pg_query($conn, $createDeleteTriggerQuery);
    if (!$deleteTriggerResult) {
        throw new Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Delete Trigger ‡πÑ‡∏î‡πâ: " . pg_last_error($conn));
    }
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Delete Trigger ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Trigger ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    echo "<h3>üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Trigger ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á...</h3>";
    
    $checkTriggerQuery = "
    SELECT 
        trigger_name,
        event_manipulation,
        action_timing,
        action_statement
    FROM information_schema.triggers 
    WHERE event_object_table = 'payments'
    ORDER BY trigger_name;
    ";
    
    $checkResult = pg_query($conn, $checkTriggerQuery);
    if ($checkResult) {
        echo "<table border='1' style='border-collapse: collapse; width: 100%; margin: 10px 0;'>";
        echo "<tr><th>Trigger Name</th><th>Event</th><th>Timing</th><th>Action</th></tr>";
        
        while ($row = pg_fetch_assoc($checkResult)) {
            echo "<tr>";
            echo "<td>{$row['trigger_name']}</td>";
            echo "<td>{$row['event_manipulation']}</td>";
            echo "<td>{$row['action_timing']}</td>";
            echo "<td>{$row['action_statement']}</td>";
            echo "</tr>";
        }
        echo "</table>";
    }
    
    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Trigger
    echo "<h3>üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Trigger...</h3>";
    
    // ‡∏´‡∏≤ order ‡∏ó‡∏µ‡πà‡∏°‡∏µ payment_status = 'pending'
    $testQuery = "
    SELECT p.id, p.order_id, p.payment_status, o.order_status
    FROM payments p
    JOIN orders o ON p.order_id = o.id
    WHERE p.payment_status = 'pending'
    LIMIT 1;
    ";
    
    $testResult = pg_query($conn, $testQuery);
    if ($testResult && pg_num_rows($testResult) > 0) {
        $testData = pg_fetch_assoc($testResult);
        $paymentId = $testData['id'];
        $orderId = $testData['order_id'];
        
        echo "üîç ‡∏û‡∏ö Payment ID: {$paymentId}, Order ID: {$orderId}<br>";
        echo "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö: Payment = {$testData['payment_status']}, Order = {$testData['order_status']}<br>";
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö UPDATE payment_status ‡πÄ‡∏õ‡πá‡∏ô 'paid'
        $updateQuery = "UPDATE payments SET payment_status = 'paid' WHERE id = $1";
        $updateResult = pg_query_params($conn, $updateQuery, [$paymentId]);
        
        if ($updateResult) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            $checkUpdateQuery = "
            SELECT p.payment_status, o.order_status
            FROM payments p
            JOIN orders o ON p.order_id = o.id
            WHERE p.id = $1;
            ";
            
            $checkUpdateResult = pg_query_params($conn, $checkUpdateQuery, [$paymentId]);
            if ($checkUpdateResult && pg_num_rows($checkUpdateResult) > 0) {
                $updateData = pg_fetch_assoc($checkUpdateResult);
                echo "‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö: Payment = {$updateData['payment_status']}, Order = {$updateData['order_status']}<br>";
                
                if ($updateData['payment_status'] === 'paid' && $updateData['order_status'] === 'paid') {
                    echo "üéâ Trigger ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Order status ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥<br>";
                } else {
                    echo "‚ö†Ô∏è Trigger ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤<br>";
                }
            }
            
            // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            $revertQuery = "UPDATE payments SET payment_status = 'pending' WHERE id = $1";
            pg_query_params($conn, $revertQuery, [$paymentId]);
            echo "üîÑ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß<br>";
            
        } else {
            echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: " . pg_last_error($conn) . "<br>";
        }
    } else {
        echo "‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ payment ‡∏ó‡∏µ‡πà pending ‡πÉ‡∏´‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö<br>";
    }
    
    // 6. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    echo "<h3>üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>";
    echo "<div style='background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0;'>";
    echo "<h4>‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Trigger ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ-‡∏Å‡∏•‡∏±‡∏ö):</h4>";
    echo "<ul>";
    echo "<li><strong>‡∏°‡∏µ Payment ‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô 'paid'</strong> ‚Üí order_status = 'paid'</li>";
    echo "<li><strong>‡πÑ‡∏°‡πà‡∏°‡∏µ Payment ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 'paid' ‡πÄ‡∏•‡∏¢</strong> ‚Üí order_status = 'pending'</li>";
    echo "<li><strong>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Rollback</strong> ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô pending ‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>";
    echo "<li><strong>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ Payment ‡∏ï‡πà‡∏≠ Order</strong> ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö</li>";
    echo "</ul>";
    
    echo "<h4>üîß ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Trigger ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ-‡∏Å‡∏•‡∏±‡∏ö):</h4>";
    echo "<pre><code>-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Payment ‡πÉ‡∏´‡∏°‡πà
INSERT INTO payments (order_id, amount, payment_method, payment_status)
VALUES (123, 500.00, 'QR', 'pending');

-- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Payment ‡πÄ‡∏õ‡πá‡∏ô paid
UPDATE payments 
SET payment_status = 'paid' 
WHERE id = 1;

-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô failed (Rollback)
UPDATE payments 
SET payment_status = 'failed' 
WHERE id = 1;

-- Trigger ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
-- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Payment ‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô paid ‚Üí Order = 'paid'
-- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Payment ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô paid ‡πÄ‡∏•‡∏¢ ‚Üí Order = 'pending' (Rollback)
-- ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å PHP ‡∏´‡∏£‡∏∑‡∏≠ webhook ‡πÄ‡∏û‡∏¥‡πà‡∏°</code></pre>";
    
    echo "<h4>‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á:</h4>";
    echo "<ul>";
    echo "<li>Trigger ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà INSERT/UPDATE/DELETE payments</li>";
    echo "<li>‡∏Ñ‡∏ß‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö DB Test ‡∏Å‡πà‡∏≠‡∏ô deploy ‡∏à‡∏£‡∏¥‡∏á</li>";
    echo "<li>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ Payment ‡∏ï‡πà‡∏≠ Order ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß</li>";
    echo "<li>Logic ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö COUNT ‡∏Ç‡∏≠‡∏á paid payments</li>";
    echo "</ul>";
    echo "</div>";
    
    pg_close($conn);
    
    echo "<br><hr>";
    echo "<h3>üéâ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ-‡∏Å‡∏•‡∏±‡∏ö) ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!</h3>";
    echo "<p>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï order_status ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° Logic ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞:</p>";
    echo "<ul>";
    echo "<li>‡∏°‡∏µ Payment ‡πÉ‡∏î‡πÄ‡∏õ‡πá‡∏ô 'paid' ‚Üí Order = 'paid'</li>";
    echo "<li>‡πÑ‡∏°‡πà‡∏°‡∏µ Payment ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 'paid' ‡πÄ‡∏•‡∏¢ ‚Üí Order = 'pending'</li>";
    echo "<li>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Rollback ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>";
    echo "<li>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ Payment ‡∏ï‡πà‡∏≠ Order ‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</li>";
    echo "</ul>";
    echo "<p>‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å webhook.php ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ</p>";
    
} catch (Exception $e) {
    echo "<div style='color: red;'>‚ùå Error: " . $e->getMessage() . "</div>";
    echo "<pre>Stack trace: " . $e->getTraceAsString() . "</pre>";
}

echo "<br><div style='text-align: center;'>";
echo "<a href='test_trigger.php' class='btn btn-primary' style='margin: 5px; padding: 10px 20px; text-decoration: none; background: #007bff; color: white; border-radius: 5px;'>üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Trigger</a>";
echo "<a href='test_webhook.php' class='btn btn-info' style='margin: 5px; padding: 10px 20px; text-decoration: none; background: #17a2b8; color: white; border-radius: 5px;'>üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook</a>";
echo "<a href='index.php' class='btn btn-secondary' style='margin: 5px; padding: 10px 20px; text-decoration: none; background: #6c757d; color: white; border-radius: 5px;'>üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>";
echo "</div>";
?>

<style>
body { 
    font-family: Arial, sans-serif; 
    margin: 20px; 
    background: #f8f9fa;
}
h2, h3 { 
    color: #2c3e50; 
    border-bottom: 2px solid #3498db; 
    padding-bottom: 10px;
}
.btn { 
    display: inline-block; 
    padding: 10px 20px; 
    margin: 5px; 
    text-decoration: none; 
    border-radius: 5px; 
    transition: all 0.3s ease;
}
.btn:hover { 
    transform: translateY(-2px); 
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
}
table { 
    margin: 10px 0; 
    background: white;
}
th, td { 
    padding: 8px; 
    text-align: left; 
    border: 1px solid #ddd;
}
th { 
    background: #e9ecef; 
    font-weight: bold;
}
pre { 
    background: #f8f9fa; 
    padding: 15px; 
    border-radius: 5px; 
    border-left: 4px solid #007bff;
    overflow-x: auto;
}
code { 
    background: #e9ecef; 
    padding: 2px 5px; 
    border-radius: 3px;
}
</style>
